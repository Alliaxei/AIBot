import asyncio

from aiogram import Router, F, types
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.utils.media_group import MediaGroupBuilder
from sqlalchemy import select, func


from apps.database.database import async_session
from apps.database.models import Gallery
from apps.database.requests import update_user_size, add_credits, get_user_db_id
from apps.keyboards import keyboards as kb
from apps.database import requests
from apps.keyboards.keyboards import get_styles_keyboard, get_quality_keyboard, back, \
    get_next_page_keyboard
from apps.states import ImageState, BuyingState


router = Router()

def get_profile_text(user) -> str:
    return (
        "‚ú® *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç* ‚ú®\n\n"
        f"üë§ –ò–º—è: *{user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}*\n"
        f"üåê Username: *@{user.username or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}*\n"
        f"üìå Telegram ID: `{user.telegram_id}`\n\n"
        f"üñº –ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: *{user.settings.image_size or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}*\n"
        f"üé® –í—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å: *{user.settings.selected_style or '–ù–µ –≤—ã–±—Ä–∞–Ω'}*\n\n"
        
        f"üí∞ –ö—Ä–µ–¥–∏—Ç—ã: *{user.credits or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}* —à—Ç.\n\n"
        
        "=======================\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
    )

@router.callback_query(F.data == 'generate_image')
async def generate_image_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...', reply_markup=kb.back)
    await state.set_state(ImageState.waiting_for_prompt)


async def show_profile(message: Message):
    user = await requests.get_user(message.from_user.id)

    if user is None:
        await message.answer(
            text='–û—à–∏–±–∫–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start',
            reply_markup=kb.back
        )
        return
    profile_text = get_profile_text(user)

    await message.answer(
        text=profile_text,
        parse_mode="Markdown",
        reply_markup=kb.profile
    )

@router.callback_query(F.data == 'profile')
async def profile_handler(callback: CallbackQuery):
    user = await requests.get_user(callback.from_user.id)

    if user is None:
        await callback.message.edit_text(
            text='–û—à–∏–±–∫–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start',
            reply_markup=kb.back
        )
        return
    profile_text = get_profile_text(user)

    await callback.message.edit_text(
        text=profile_text,
        parse_mode="Markdown",
        reply_markup=kb.profile
    )

@router.callback_query(F.data == 'update_data')
async def update_data_handler(callback: CallbackQuery):
    user = await requests.get_user(callback.from_user.id)
    if user is None:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")
        return

    try:
        await requests.update_user(
            tg_id=callback.from_user.id,
            username=callback.from_user.username,
            first_name=callback.from_user.first_name,
        )

        updated_user = await requests.get_user(callback.from_user.id)
        if updated_user is None:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
            return

        profile_text = get_profile_text(updated_user)

        try:
            await callback.message.edit_text(
                text=profile_text,
                parse_mode="Markdown",
                reply_markup=kb.profile
            )
            await callback.answer("‚úÖ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")

        except TelegramBadRequest as e:
            if "message is not modified" in str(e).lower():
                await callback.answer("‚ÑπÔ∏è –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã.")
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ.")
        else:
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
    except Exception as e:
        await callback.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {str(e)}")

    await asyncio.sleep(0.5)

@router.callback_query(F.data == 'credits')
async def credits_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–±–æ–ª—å—à–µ - –¥–µ—à–µ–≤–ª–µ)', reply_markup=kb.credits)
    await state.set_state(BuyingState.waiting_for_transaction)

@router.callback_query(F.data == 'back')
async def back_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(text='üè† –í—ã –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?', reply_markup=kb.main)
    await state.clear()

@router.callback_query(F.data == 'settings')
async def settings_handler(callback: CallbackQuery):
    await callback.message.edit_text(text='‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è', reply_markup=kb.settings)

@router.callback_query(F.data == 'back_to_settings')
async def back_to_settings_handler(callback: CallbackQuery):
    await callback.message.edit_text(text='‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è', reply_markup=kb.settings)

@router.callback_query(F.data == 'image_style')
async def image_style_handler(callback: CallbackQuery):
    user = await requests.get_user(callback.from_user.id)
    styles_keyboard = await get_styles_keyboard(user.telegram_id)
    await callback.message.edit_text(text='–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏):',reply_markup=styles_keyboard)

@router.callback_query(F.data == 'image_quality')
async def image_quality_handler(callback: CallbackQuery):
    user = await requests.get_user(callback.from_user.id)
    quality_keyboard = await get_quality_keyboard(user.telegram_id)
    await callback.message.edit_text(text='–í—ã–±–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', reply_markup=quality_keyboard)

@router.callback_query(F.data.startswith('style_'))
async def set_style(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å—Ç–∏–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    new_style = callback.data.replace("style_", "", 1)
    await requests.update_user_style(callback.from_user.id, new_style)
    new_keyboard = await get_styles_keyboard(callback.from_user.id)
    await callback.message.edit_reply_markup(reply_markup=new_keyboard)

@router.callback_query(F.data.startswith('size_'))
async def size_callback_handler(callback: CallbackQuery):
    new_size = callback.data.split("_")[1]
    await update_user_size(callback.from_user.id, new_size)
    new_keyboard = await get_quality_keyboard(callback.from_user.id)
    await callback.message.edit_reply_markup(reply_markup=new_keyboard)

@router.callback_query(F.data == 'gallery')
async def gallery_handler(callback: CallbackQuery):
    await show_gallery(callback.message, callback.from_user.id)



async def show_gallery(message: types.Message, user_id: int, offset: int = 0):
    loading_message = await message.answer("‚è≥ –ò–¥—ë—Ç –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with async_session() as session:
        '''–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞'''
        user_id_db = await get_user_db_id(session, user_id)

        if user_id_db is None:
            await loading_message.edit_text('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.')
            return

        gallery_items = await session.execute(
            select(Gallery)
            .where(Gallery.user_id == user_id_db)
            .order_by(Gallery.created_at.desc())
            .limit(10)
            .offset(offset)
        )
        gallery_items = gallery_items.scalars().all()


    if gallery_items:
        media_group = MediaGroupBuilder()

        for item in gallery_items:
            caption = f"–ü—Ä–æ–º—Ç: {item.prompt or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\nüìÖ {item.created_at.strftime('%d %m %Y %H:%M:%S')}"
            try:
                media_group.add(type="photo", media=item.image_url, caption=caption)
            except Exception as e:
                await loading_message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

        await message.answer_media_group(media_group.build())
        await loading_message.edit_text("–ì–∞–ª–µ—Ä–µ—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")

        total_images = await session.scalar(
            select(func.count(Gallery.id)).where(Gallery.user_id == user_id_db)
        )
        next_offset = offset + 10
        if next_offset < total_images:
            _reply_markup = get_next_page_keyboard(next_offset)
            _text = "üì∑ –í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ 10 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –•–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –±–æ–ª—å—à–µ?"
            await message.answer(text=_text, reply_markup=_reply_markup)
        else:
            _text = "–í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
            await message.answer(text=_text, reply_markup=back)
    else:
        await loading_message.edit_text("–í–∞—à–∞ –≥–∞–ª–µ—Ä–µ—è –ø—É—Å—Ç–∞.", reply_markup=back)

@router.callback_query(F.data.startswith('more_images_'))
async def load_more_images(callback: CallbackQuery):
    loading_message = await callback.message.answer("‚è≥ –ò–¥—ë—Ç –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    offset = int(callback.data.split('_')[-1])

    async with (async_session() as session):
        user_id_db = await get_user_db_id(session, callback.from_user.id)
        if user_id_db is None:
            await loading_message.edit_text('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.')
            return

        gallery_items = await session.execute(
            select(Gallery)
            .where(Gallery.user_id == user_id_db)
            .order_by(Gallery.created_at.desc())
            .limit(8)
            .offset(offset)
        )
        gallery_items = gallery_items.scalars().all()

        if gallery_items:
            media_group = MediaGroupBuilder()

            for index, item in enumerate(gallery_items):
                image_url = item.image_url
                if not image_url.startswith('http'):
                    await loading_message.edit_text("‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π URL —É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
                    return
                try:
                    caption = f"–í–∞—à –ø—Ä–æ–º—Ç: {item.prompt or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\nüìÖ {item.created_at.strftime('%d %m %Y %H:%M:%S')}"
                    media_group.add(type="photo", media=image_url, caption=caption)
                except Exception as e:
                    await loading_message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
                    print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

            await callback.message.answer_media_group(media_group.build())
            await loading_message.edit_text("–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")

            total_images = await session.scalar(
                select(func.count(Gallery.id)).where(Gallery.user_id == user_id_db)
            )

            next_offset = offset + 8

            if next_offset < total_images:
                _reply_markup = get_next_page_keyboard(next_offset)
                _text = "üì∑ –ï—Å—Ç—å –µ—â—ë –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
                await callback.message.answer(text=_text, reply_markup=_reply_markup)
            else:
                _text = "–í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
                await callback.message.answer(text=_text, reply_markup=back)
        else:
            await loading_message.edit_text("‚ùå –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

@router.callback_query(F.data.startswith('credits_'))
async def buying_credits(callback: CallbackQuery):
    loading_message = await callback.message.answer("‚è≥ –ò–¥—ë—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    amount = int(callback.data.split('_')[-1])

    await asyncio.sleep(0.5)
    async with async_session() as session:
        user_id_db = await get_user_db_id(session, callback.from_user.id)
        await add_credits(session, user_id_db, amount)

    await loading_message.edit_text(f"‚úÖ –í–∞—à –±–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} –∫—Ä–µ–¥–∏—Ç–æ–≤!", reply_markup=kb.back)



