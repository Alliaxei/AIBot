from aiogram import Router, F

from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext

from apps.keyboards import keyboards as kb
from apps.database import requests
from apps.states import DeepSeekState, VideoState

router = Router()

def get_profile_text(user) -> str:
    return (
        "‚ú® *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç* ‚ú®\n\n"
        f"üë§ –ò–º—è: *{user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}*\n"
        f"üåê Username: *@{user.username or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}*\n"
        f"üìå Telegram ID: `{user.telegram_id}`\n\n"
        f"üí∞ –ö—Ä–µ–¥–∏—Ç—ã: *{user.credits_left or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}* —à—Ç.\n\n"
        "=======================\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
    )

@router.callback_query(F.data == 'profile')
async def profile_handler(callback: CallbackQuery):
    user = await requests.get_user(callback.from_user.id)

    if user is None:
        await callback.message.edit_text(
            text='–û—à–∏–±–∫–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start',
            reply_markup=kb.back
        )
        return
    profile_text = get_profile_text(user)

    await callback.message.edit_text(
        text=profile_text,
        parse_mode="Markdown",
        reply_markup=kb.profile
    )

@router.callback_query(F.data == 'update_data')
async def update_data_handler(callback: CallbackQuery):
    user = await requests.get_user(callback.from_user.id)
    if user is None:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")
        return

    try:
        await requests.update_user(
            tg_id=callback.from_user.id,
            username=callback.from_user.username,
            first_name=callback.from_user.first_name,
        )
        updated_user = await requests.get_user(callback.from_user.id)
        if updated_user is None:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
            return

        profile_text = get_profile_text(updated_user)
        await callback.message.edit_text(
            text=profile_text,
            parse_mode="Markdown",
            reply_markup=kb.profile
        )
        await callback.answer("‚úÖ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    except Exception as e:
        await callback.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {str(e)}")

@router.callback_query(F.data == 'deepseek')
async def deepseek_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å ...', reply_markup=kb.back)
    await state.set_state(DeepSeekState.waiting_for_promt)

@router.callback_query(F.data == 'generate_video')
async def generate_video_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ', reply_markup=kb.back)
    await state.set_state(VideoState.waiting_for_promt)

@router.callback_query(F.data == 'back')
async def back_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(text='–í—ã –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ', reply_markup=kb.main)
    await state.clear()