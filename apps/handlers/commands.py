from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery

from aiogram.fsm.context import FSMContext
from apps.keyboards import keyboards as kb
from apps.database import requests
from apps.handlers.callbacks import show_profile
from apps.states import ImageState, BuyingState
router = Router()

@router.message(Command('start'))
async def start_handler(message: Message):
    await requests.set_user(message.from_user.id, message.from_user.username, message.from_user.first_name)
    await message.answer("üåü –ü—Ä–∏–≤–µ—Ç! –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å –≤ Flux AI! üéâ\n–ù–∞—à –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ—Ç—Ä—è—Å–∞—é—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –í—ã–±–∏—Ä–∞–π, —á—Ç–æ —Ö–æ—á–µ—à—å, –∏ –¥–∞–≤–∞–π –Ω–∞—á–Ω–µ–º! üëáüòä",
                         reply_markup=kb.main)

@router.message(Command('help'))
async def help_handler(message: Message):
    await message.answer(
        "ü§ñ *–û –±–æ—Ç–µ*\n"
        "–≠—Ç–æ—Ç –±–æ—Ç —É–º–µ–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å *—Ç–µ–∫—Å—Ç*, *–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è* –∏ *–≤–∏–¥–µ–æ* –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é! üñºÔ∏èüé•‚úçÔ∏è\n\n"
        "üí∞ *–°–∏—Å—Ç–µ–º–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤*\n"
        "‚Äî –ö–∞–∂–¥–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –∫—Ä–µ–¥–∏—Ç—ã.\n"
        "‚Äî –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è *–±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã*.\n"
        "‚Äî –ú–æ–∂–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ *–Æ–ú–∞–Ω–∏*.\n\n"
        "üìå *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?*\n"
        "–í—ã–±–∏—Ä–∞–π –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –º–µ–Ω—é –∏ —Å–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º! üöÄ\n\n"
        "üîÑ *–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞*\n"
        "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞. üîÅ",
        parse_mode="Markdown"
    )

@router.message(Command('profile'))
async def profile_handler(message: Message):
    await show_profile(message)

@router.message(Command('generate'))
async def generate_handler(message: Message):
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ `/generate –≤–∞—à –∑–∞–ø—Ä–æ—Å`', parse_mode="Markdown")
        return
    user_request = args[1]
    await message.answer(f"‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É: `{user_request}`\n–û–∂–∏–¥–∞–π—Ç–µ...", parse_mode="Markdown")

@router.message(Command('buy'))
async def buy_handler(message: Message, state: FSMContext):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–±–æ–ª—å—à–µ - –¥–µ—à–µ–≤–ª–µ)', reply_markup=kb.credits)
    await state.set_state(BuyingState.waiting_for_transaction)

@router.message(Command('settings'))
async def settings_handler(message: Message):
    await message.answer(text='‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è', reply_markup=kb.settings)

@router.message(Command('styles'))
async def styles_handler(message: Message):
    user = await requests.get_user(message.from_user.id)

    if not user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    keyboard = await kb.get_styles_keyboard(user.telegram_id)
    await message.answer("üé® –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", reply_markup=keyboard)

@router.message(Command('quality'))
async def size_handler(message: Message):
    user = await requests.get_user(message.from_user.id)
    if not user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    keyboard = await kb.get_quality_keyboard(user.telegram_id)
    await message.answer("üé® –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", reply_markup=keyboard)